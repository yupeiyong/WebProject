1、标签元素分为块级元素和内联元素
一、块级元素
1、概念
   1）定义：块级元素”对应的英文是 block-level element，常见的块级元素有<div>、<li>和<table>	等。也就是一个水平流上只能单独显示一个元素，多个块级元素则换行显示。
   2）注意：块级元素和“display 为 block 的元素”不是一个概念。
      例如，<li>元素默认的 display 值是 list-item，<table>元素默认的 display 值是 table，但是它们均是“块级元素”，因为它们都符合块级元素的基本特征
2、每个盒子都有一个外在盒子和容器盒子
	block 
	inline-block 外在盒子inline,容器盒子block
	inline-table 外在盒子inline,容器盒子table
	inline

3、width:auto
   1）充分利用可用空间。比方说，<div>、<p>这些元素的宽度默认是 100%于父级容器的。
      这种充分利用可用空间的行为还有个专有名字，叫作 fill-available，大家了解即可。
   2）收缩与包裹。典型代表就是浮动、绝对定位、inline-block 元素或 table 元素，
      英文称为 shrink-to-fit，直译为“收缩到合适”，有那么点儿意思，但不够形象，我一直把这种现象称为“包裹性”。
	  CSS3 中的 fit-content 指的就是这种宽度表现
   3）收缩到最小。这个最容易出现在 table-layout 为 auto 的表格中
   4）超出容器限制。除非有明确的 width 相关设置，否则上面 3 种情况尺寸都不会主动超过父级容器宽度的，
      但是存在一些特殊情况。例如，内容很长的连续的英文和数字，或者内联元素被设置了 white-space:nowrap。
4、外部尺寸与流体特性
	（1）正常流宽度。当我们在一个容器里倒入足量的水时，	水一定会均匀铺满整个容器。
	在页面中随便扔一个<div>元素，其尺寸表现就会和这水流一样铺满容器。
	这就是 block 容器的流特性。这种特性，所有	浏览器的表现都是一致的。
	（2）格式化宽度。格式化宽度仅出现在“绝对定位模型”中，也就是出现在 position属性值为 absolute 或 fixed 的元素中。
	在默认情况下，绝对定位元素的宽度表现是“包裹性”，宽度由内部尺寸决定，但是，有一种情况其宽度是由外部尺寸决定的，是什么情况呢？
	对于非替换元素（见本书第 4 章），当 left/top 或 top/bottom 对立方位的属性值同时存在的时候，
	元素的宽度表现为“格式化宽度”，其宽度大小相对于最近的具有定位特性（position 属性值不是 static）的祖先元素计算。
	例如，下面一段 CSS 代码：
	div { position: absolute; left: 20px; right: 20px; } 
	假设该<div>元素最近的具有定位特性的祖先元素的宽度是 1000 像素，则这个<div>元素的宽度是 960（即 1000−20−20）像素。
	此外，和上面的普通流一样，“格式化宽度”具有完全的流体性，也就是 margin、border、padding 和 content 内容区域同样会自动分配水平（和垂直）空间
5、内部尺寸与流体特性
   1）定义：所谓“内部尺寸”，简单来讲就是元素的尺寸由内部的元素决定，而非由外部的容器决定。
   2）包裹性：“包裹性”是我自己对“shrink-to-fit”理解后的一种称谓，我个人觉得非常形象好记，一直用了很多年。
	“包裹性”也是 CSS 世界中很重要的流布局表现形式。
	中文就是博大精深，顾名思义，“包裹性”，除了“包裹”，还有“自适应性”。
	“自适应性”是区分后面两种尺寸表现很重要的一点。那么这个“自适应性”指的是什么呢？
	所谓“自适应性”，指的是元素尺寸由内部元素决定，但永远小于“包含块”容器的尺寸（除非容器尺寸小于元素的“首选最小宽度”）。
	换句话说就是，“包裹性”元素冥冥中有个 max-width:100%罩着的感觉（注意，此说法只是便于大家理解，实际上是有明显区别的）。
	因此，对于一个元素，如果其 display 属性值是 inline-block，那么即使其里面内容再多，
	只要是正常文本，宽度也不会超过容器。于是，图文混排的时候，我们只要关心内容，
	除非“首选最小宽度”比容器宽度还要大，否则我们完全不需要担心某个元素内容太多而破坏了布局。
	凡事发生必有缘由。CSS 世界的造物主为何要设计“包裹性”这个东西呢？是为谁设计的呢？
	反问是探究知识的很好的习惯和方式。要回答上面的问题，我们只要请一个嘉宾出来，答
	案就基本差不多了。下面我们就请出重量级嘉宾—著名的“按钮”元素。没错，就是默认长
	得比较丑，样式定义兼容性又不好的按钮元素。
	3）首选最小宽度。
		所谓“首选最小宽度”，指的是元素最适合的最小宽度。我们接着上面的例子，在上面例子中，
		外部容器的宽度是 240 像素，假设宽度是 0，请问里面的 inline-block 元素的宽度是多少？
		是 0 吗？不是。在 CSS 世界中，图片和文字的权重要远大于布局，因此，CSS 的设计者显
		然是不会让图文在 width:auto 时宽度变成 0 的，此时所表现的宽度就是“首选最小宽度”。
		具体表现规则如下。
		• 东亚文字（如中文）最小宽度为每个汉字的宽度，
		如图 3-11 所示的 14。
		• 西方文字最小宽度由特定的连续的英文字符单元决定。并不是所有的英文字符都会组成连续单元，
		一般会终止于空格（普通空格）、短横线、问号以及其他非英文字符等。例如，“display:inlineblock”这几个字符以连接符“-”作为分隔符，形
		成了“display:inline”和“block”两个连续单元，由于连接符“-”分隔位置在字符后面，因此，
		最后的宽度就是“display:inline-”的宽度，
		如图 3-12 所示。
		如果想让英文字符和中文一样，每一个字符都用最小宽度单元，
		可以试试使用 CSS 中的 word-break:break-all。
		• 类似图片这样的替换元素的最小宽度就是该元素内容本身的宽度。
	4）最大宽度。
		最大宽度就是元素可以有的最大宽度。我自己是这么理解的，“最大宽
		度”实际等同于“包裹性”元素设置 white-space:nowrap 声明后的宽
		度。如果内部没有块级元素或者块级元素没有设定宽度值，则“最大宽度”实际上是最大的连
		续内联盒子的宽度。
		什么是连续内联盒子？“内联盒子”的内容会在 3.4 节深入讲解，这里你就简单地将其理
		解为 display 为 inline、inline-block、inline-table 等元素。“连续内联盒子”指
		的全部都是内联级别的一个或一堆元素，中间没有任何的换行标签<br>或其他块级元素。
6、width作用细节
	width作用于content box（容器盒子） 
7、改变 width/height 作用细节的 box-sizing
	虽然 box-sizing 被直译为“盒尺寸”，实际上，其更准确的叫法应该是“盒尺寸的作用
	细节”，或者说得更通俗一点，叫“width 作用的细节”，也就是说，box-sizing 属性的作用
	是改变 width 的作用细节。
	那它改变了什么细节呢？一句话，改变了 width 作用的盒子。还记不记得“内在盒子”
	的 4 个盒子？它们分别是 content box、padding box、border box 和 margin box。默认情况下，width
	是作用在 content box 上的，box-sizing 的作用就是可以把 width 作用的盒子变成其他几个，
	因此，理论上，box-sizing 可以有下面这些写法：
	.box1 { box-sizing: content-box; } 
	.box2 { box-sizing: padding-box; } 
	.box3 { box-sizing: border-box; } 
	.box4 { box-sizing: margin-box; } 
8、相对简单而单纯的 height:auto
二、内联元素
1、概念
   1）定义：inline-block 和 inline-table 都是“内联元素”，因为它们的“外在盒子”都是内联盒子。
   自然 display:inline 的元素也是“内联元素”，那么，<button>按钮元素是内联元素，
   因为其 display 默认值是 inline-block；<img>图片元素也是内联元素，因为其 display 默认值是 inline 等
  2）注意：首先要明白这一点：“内联元素”的“内联”特指“外在盒子”，和“display 为 inline的元素”不是一个概念！
  3）表现：就行为表现来看，“内联元素”的典型特征就是可以和文字在一行显示。
  因此，文字是内联元素，图片是内联元素，按钮是内联元素，输入框、下拉框等原生表单控件也是内联元素。
  下面有一个疑问：浮动元素貌似也是可以和文字在一个水平上显示的，是不是浮动元素也是内联级别的呢？
  不是的。实际上，浮动元素和后面的文字并不在一行显示，浮动元素已经在文档流之外了。
  证据就是，当后面文字足够多的时候，文字并不是在浮动元素的下面，而是继续在后面。
  这就说明，浮动元素和后面文字不在一行，只是它们恰好站在了一起而已。真相是，浮动元素会生成“块盒子”，这就是后话了
